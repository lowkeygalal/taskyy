// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using taskyy.Configurations;

#nullable disable

namespace taskyy.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    [Migration("20250903225917_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("taskyy.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("taskyy.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BookId");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.HasIndex("LibraryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("taskyy.Models.BookLoan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("LoanId");

                    b.HasIndex("BookId");

                    b.HasIndex("StudentId");

                    b.ToTable("BookLoans");
                });

            modelBuilder.Entity("taskyy.Models.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassroomId"));

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassroomId");

                    b.ToTable("Classrooms", t =>
                        {
                            t.HasCheckConstraint("CheckPositive", "Capacity > 0");
                        });
                });

            modelBuilder.Entity("taskyy.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CourseId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses", t =>
                        {
                            t.HasCheckConstraint("CheckPositivity", "Credits > 0");
                        });
                });

            modelBuilder.Entity("taskyy.Models.CourseSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ScheduleId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("CourseSchedules");
                });

            modelBuilder.Entity("taskyy.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int?>("HeadOfDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OfficeLocation")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("HeadOfDepartmentId")
                        .IsUnique()
                        .HasFilter("[HeadOfDepartmentId] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("taskyy.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("taskyy.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExamId");

                    b.HasIndex("CourseId");

                    b.ToTable("Exams", t =>
                        {
                            t.HasCheckConstraint("CK_Exam_Type", "[Type] IN (N'Midterm', N'Final')");
                        });
                });

            modelBuilder.Entity("taskyy.Models.ExamResult", b =>
                {
                    b.Property<int>("ExamResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamResultId"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ExamResultId");

                    b.HasIndex("StudentId");

                    b.HasIndex("ExamId", "StudentId")
                        .IsUnique();

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("taskyy.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("InstructorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("taskyy.Models.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LibraryId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("taskyy.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StudentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("students");
                });

            modelBuilder.Entity("taskyy.Models.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.HasKey("SubmissionId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("taskyy.Models.Assignment", b =>
                {
                    b.HasOne("taskyy.Models.Course", "NavCourse")
                        .WithMany("NavAssignment")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavCourse");
                });

            modelBuilder.Entity("taskyy.Models.Book", b =>
                {
                    b.HasOne("taskyy.Models.Library", "NavLibrary")
                        .WithMany("NavBook")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NavLibrary");
                });

            modelBuilder.Entity("taskyy.Models.BookLoan", b =>
                {
                    b.HasOne("taskyy.Models.Book", "NavBook")
                        .WithMany("NavBookLoan")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskyy.Models.Student", "NavStudent")
                        .WithMany("NavBookLoan")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NavBook");

                    b.Navigation("NavStudent");
                });

            modelBuilder.Entity("taskyy.Models.Course", b =>
                {
                    b.HasOne("taskyy.Models.Department", "NavDepartment")
                        .WithMany("NavCourse")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavDepartment");
                });

            modelBuilder.Entity("taskyy.Models.CourseSchedule", b =>
                {
                    b.HasOne("taskyy.Models.Classroom", "NavClassroom")
                        .WithMany("NavCourseSchedule")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskyy.Models.Course", "NavCourse")
                        .WithMany("NavCourseSchedule")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskyy.Models.Instructor", "NavInstructor")
                        .WithMany("NavCourseSchedule")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NavClassroom");

                    b.Navigation("NavCourse");

                    b.Navigation("NavInstructor");
                });

            modelBuilder.Entity("taskyy.Models.Department", b =>
                {
                    b.HasOne("taskyy.Models.Instructor", "NavHeadOfDepartment")
                        .WithOne("NavHeadOfDepartment")
                        .HasForeignKey("taskyy.Models.Department", "HeadOfDepartmentId");

                    b.Navigation("NavHeadOfDepartment");
                });

            modelBuilder.Entity("taskyy.Models.Enrollment", b =>
                {
                    b.HasOne("taskyy.Models.Course", "NavCourse")
                        .WithMany("NavEnrollment")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskyy.Models.Student", "NavStudent")
                        .WithMany("NavEnrollment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NavCourse");

                    b.Navigation("NavStudent");
                });

            modelBuilder.Entity("taskyy.Models.Exam", b =>
                {
                    b.HasOne("taskyy.Models.Course", "NavCourse")
                        .WithMany("NavExam")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavCourse");
                });

            modelBuilder.Entity("taskyy.Models.ExamResult", b =>
                {
                    b.HasOne("taskyy.Models.Exam", "NavExam")
                        .WithMany("NavExamResult")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskyy.Models.Student", "NavStudent")
                        .WithMany("NavExamResult")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NavExam");

                    b.Navigation("NavStudent");
                });

            modelBuilder.Entity("taskyy.Models.Instructor", b =>
                {
                    b.HasOne("taskyy.Models.Department", "NavDepartment")
                        .WithMany("NavInstructor")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavDepartment");
                });

            modelBuilder.Entity("taskyy.Models.Student", b =>
                {
                    b.HasOne("taskyy.Models.Department", "NavDepartmentId")
                        .WithMany("NavStudent")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NavDepartmentId");
                });

            modelBuilder.Entity("taskyy.Models.Submission", b =>
                {
                    b.HasOne("taskyy.Models.Assignment", "NavAssignment")
                        .WithMany("NavSubmission")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("taskyy.Models.Student", "NavStudent")
                        .WithMany("NavSubmission")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NavAssignment");

                    b.Navigation("NavStudent");
                });

            modelBuilder.Entity("taskyy.Models.Assignment", b =>
                {
                    b.Navigation("NavSubmission");
                });

            modelBuilder.Entity("taskyy.Models.Book", b =>
                {
                    b.Navigation("NavBookLoan");
                });

            modelBuilder.Entity("taskyy.Models.Classroom", b =>
                {
                    b.Navigation("NavCourseSchedule");
                });

            modelBuilder.Entity("taskyy.Models.Course", b =>
                {
                    b.Navigation("NavAssignment");

                    b.Navigation("NavCourseSchedule");

                    b.Navigation("NavEnrollment");

                    b.Navigation("NavExam");
                });

            modelBuilder.Entity("taskyy.Models.Department", b =>
                {
                    b.Navigation("NavCourse");

                    b.Navigation("NavInstructor");

                    b.Navigation("NavStudent");
                });

            modelBuilder.Entity("taskyy.Models.Exam", b =>
                {
                    b.Navigation("NavExamResult");
                });

            modelBuilder.Entity("taskyy.Models.Instructor", b =>
                {
                    b.Navigation("NavCourseSchedule");

                    b.Navigation("NavHeadOfDepartment")
                        .IsRequired();
                });

            modelBuilder.Entity("taskyy.Models.Library", b =>
                {
                    b.Navigation("NavBook");
                });

            modelBuilder.Entity("taskyy.Models.Student", b =>
                {
                    b.Navigation("NavBookLoan");

                    b.Navigation("NavEnrollment");

                    b.Navigation("NavExamResult");

                    b.Navigation("NavSubmission");
                });
#pragma warning restore 612, 618
        }
    }
}
